#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Aug 22, 2023 12:03:02 PM SAST  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import zxcvbn

_script = sys.argv[0]
_location = os.path.dirname(_script)

import Main_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0

    

class Toplevel1:

    def calculate_strength(self, password, confirm_password):
      if password != confirm_password:
         return
      strength_score = self.calculate_manual_strength(password)
      self.TProgressbar1['value'] = strength_score * 25  # Convert score to percentage
      strength_description = self.get_strength_description(strength_score)
      self.Label4.config(text=strength_description)
   
    def calculate_manual_strength(self, password):
        # Manual method to calculate password strength
        length_score = min(len(password) / 12, 1)  # Normalize length score
        complexity_score = 0

        # Check for uppercase letters, lowercase letters, digits, and special characters
        has_upper = any(c.isupper() for c in password)
        has_lower = any(c.islower() for c in password)
        has_digit = any(c.isdigit() for c in password)
        has_special = any(c in '!@#$%^&*()_-+=[]{}|;:,.<>?/~' for c in password)

        if has_upper:
            complexity_score += 0.5
        if has_lower:
            complexity_score += 0.5
        if has_digit:
            complexity_score += 0.5
        if has_special:
            complexity_score += 0.5

        strength_score = (length_score + complexity_score) / 2
        return strength_score

    def get_strength_description(self, strength_score):
       # Map the strength score to a description
      if strength_score < 0.25:
         return 'Very Weak'
      elif strength_score < 0.5:
         return 'Weak'
      elif strength_score < 0.75:
         return 'Moderate'
      elif strength_score < 1:
         return 'Strong'
      else:
         return 'Very Strong'

   
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("541x240+358+183")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1,  1)
        top.title("Create Password")

        self.top = top

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=0.033, rely=0.042, relheight=0.871
                , relwidth=0.922)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.02, rely=0.048, height=30, width=471)
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(cursor="fleur")
        self.Label1.configure(text='''This is the first time running CipherGuard or there is a missing Database.''')
        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.02, rely=0.196, height=27, width=125)
        self.Label2.configure(anchor='w')
        self.Label2.configure(compound='left')
        self.Label2.configure(text='''Create Password''')
        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.381, rely=0.206, height=22, relwidth=0.551)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(show="*")
        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.02, rely=0.344, height=27, width=115)
        self.Label3.configure(anchor='w')
        self.Label3.configure(compound='left')
        self.Label3.configure(text='''Confirm Password''')
        self.Entry2 = tk.Entry(self.Frame1)
        self.Entry2.place(relx=0.381, rely=0.354, height=22, relwidth=0.553)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(show="*")
        _style_code()
        self.TProgressbar1 = ttk.Progressbar(self.Frame1)
        self.TProgressbar1.place(relx=0.02, rely=0.67, relwidth=0.381
                , relheight=0.0, height=19)
        self.TProgressbar1.configure(length="190")
        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.02, rely=0.474, height=26, width=255)
        self.Label4.configure(anchor='w')
        self.Label4.configure(compound='left')
        self.Label4.configure(text='''Password Strength(Ensure that it is full!)''')
        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.601, rely=0.464, height=32, width=168)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(borderwidth="2")
        password = self.Entry1.get()
        confirm_password = self.Entry2.get()
        self.Button1.configure(command=lambda:Toplevel1.calculate_strength(self, password, confirm_password))
        self.Button1.configure(compound='left')
        self.Button1.configure(text='''Check password strength''')
        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.741, rely=0.67, height=32, width=98)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(borderwidth="2")
        self.Button2.configure(compound='left')
        self.Button2.configure(text='''Create''')
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    _style_code_ran = 1

def start_up():
    Main_support.main()

if __name__ == '__main__':
    start_up()




